<?php namespace ProcessWire;

/**
 * Multi-language URL field
 *
 * ProcessWire 3.x, Copyright 2017 by Ryan Cramer
 * https://processwire.com
 *
 *
 */

class FieldtypeURLLanguage extends FieldtypeURL implements FieldtypeLanguageInterface {

	public static function getModuleInfo() {
		return array(
			'title' => 'URL (Multi-language)',
			'version' => 1,
			'summary' => 'Field that stores a URL in multiple languages',
			'permanent' => false,
			'requires' => array('LanguageSupportFields'),
		);
	}

	/**
	 * Sanitize value for storage
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param LanguagesValueInterface|string $value
	 * @return LanguagesPageFieldValue
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {
		/** @var FieldtypeTextLanguage $ft */
		$ft = $this->wire('modules')->get('FieldtypeTextLanguage');
		$value = $ft->sanitizeValue($page, $field, $value);
		foreach($this->wire('languages') as $language) {
			$v = $value->getLanguageValue($language->id);
			$v = parent::sanitizeValue($page, $field, $v);
			$value->setLanguageValue($language->id, $v);
		}
		return $value;
	}

	/**
	 * Return the database schema in specified format
	 *
	 * @param Field $field
	 * @return array
	 *
	 */
	public function getDatabaseSchema(Field $field) {
		/** @var FieldtypeTextLanguage $ft */
		$ft = $this->wire('modules')->get('FieldtypeTextLanguage');
		return $ft->getDatabaseSchema($field);
	}

	/**
	 * Format value for output, typecasting to a string 
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param LanguagesValueInterface|string $value
	 * @return string
	 *
	 */
	public function formatValue(Page $page, Field $field, $value) {
		return parent::formatValue($page, $field, (string) $value);
	}

}

