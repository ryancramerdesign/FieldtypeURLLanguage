<?php namespace ProcessWire;

/**
 * Multi-language URL field
 *
 * ProcessWire 3.x, Copyright 2017 by Ryan Cramer
 * https://processwire.com
 *
 */

class FieldtypeURLLanguage extends FieldtypeURL implements FieldtypeLanguageInterface {

	public static function getModuleInfo() {
		return array(
			'title' => 'URL (Multi-language)',
			'version' => 2,
			'summary' => 'Field that stores a URL in multiple languages',
			'permanent' => false,
			'requires' => array('LanguageSupportFields'),
		);
	}

	/**
	 * Sanitize value for storage
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param LanguagesValueInterface|string $value
	 * @return LanguagesPageFieldValue
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {
		/** @var FieldtypeTextLanguage $ft */
		$ft = $this->wire('modules')->get('FieldtypeTextLanguage');
		$value = $ft->sanitizeValue($page, $field, $value);
		foreach($this->wire('languages') as $language) {
			$v = $value->getLanguageValue($language->id);
			$v = parent::sanitizeValue($page, $field, $v);
			$value->setLanguageValue($language->id, $v);
		}
		return $value;
	}

	/**
	 * Return the database schema in specified format
	 *
	 * @param Field $field
	 * @return array
	 *
	 */
	public function getDatabaseSchema(Field $field) {
		/** @var FieldtypeTextLanguage $ft */
		$ft = $this->wire('modules')->get('FieldtypeTextLanguage');
		return $ft->getDatabaseSchema($field);
	}

	/**
	 * Format value for output, typecasting to a string 
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param LanguagesValueInterface|string $value
	 * @return string
	 *
	 */
	public function formatValue(Page $page, Field $field, $value) {
		return parent::formatValue($page, $field, (string) $value);
	}

	/**
	 * Given a value, return an portable version of it as array
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|float|array|object|null $value
	 * @param array $options Optional settings to shape the exported value, if needed.
	 * @return string|float|int|array
	 *
	 */
	public function ___exportValue(Page $page, Field $field, $value, array $options = array()) {
		// in this method we are delegating the exportValue() to FieldtypeTextLanguage::exportValue
		// but we want to make sure it has textarea sleepValue, so we pass sleepValue in the $options
		if(!isset($options['sleepValue'])) $options['sleepValue'] = $this->sleepValue($page, $field, $value);
		return $this->wire('fieldtypes')->get('FieldtypeTextLanguage')->___exportValue($page, $field, $value, $options);
	}

	/**
	 * Given an export value, import it to a LanguagesPageFieldValue
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param array $value
	 * @param array $options
	 * @return LanguagesPageFieldValue
	 *
	 */
	public function ___importValue(Page $page, Field $field, $value, array $options = array()) {
		return $this->wire('fieldtypes')->get('FieldtypeTextLanguage')->___importValue($page, $field, $value, $options);
	}

}

